// Code generated by "gen_main_test.sh"; DO NOT EDIT.
package test

import (
	"testing"
	_ "embed"
)

// Test case add2 (tests/add2.coa)
//go:embed tests/add2.coa
var source_add2 string

func BenchmarkGenadd2_IS(b *testing.B) {
	tc := testCase(b, "add2", source_add2)
	tc.Run(b, TestCaseConfig{Engine: EngineInterp, Parallel: false})
}

func BenchmarkGenadd2_IP(b *testing.B) {
	tc := testCase(b, "add2", source_add2)
	tc.Run(b, TestCaseConfig{Engine: EngineInterp, Parallel: true})
}

func BenchmarkGenadd2_VS(b *testing.B) {
	tc := testCase(b, "add2", source_add2)
	tc.Run(b, TestCaseConfig{Engine: EngineVM, Parallel: false})
}

func BenchmarkGenadd2_VP(b *testing.B) {
	tc := testCase(b, "add2", source_add2)
	tc.Run(b, TestCaseConfig{Engine: EngineVM, Parallel: true})
}

func TestGenadd2_IS(t *testing.T) {
	b := t
	tc := testCase(b, "add2", source_add2)
	tc.Test(t, TestCaseConfig{Engine: EngineInterp, Parallel: false})
}

func TestGenadd2_IP(t *testing.T) {
	b := t
	tc := testCase(b, "add2", source_add2)
	tc.Test(t, TestCaseConfig{Engine: EngineInterp, Parallel: true})
}

func TestGenadd2_VS(t *testing.T) {
	b := t
	tc := testCase(b, "add2", source_add2)
	tc.Test(t, TestCaseConfig{Engine: EngineVM, Parallel: false})
}

func TestGenadd2_VP(t *testing.T) {
	b := t
	tc := testCase(b, "add2", source_add2)
	tc.Test(t, TestCaseConfig{Engine: EngineVM, Parallel: true})
}

// Test case add (tests/add.coa)
//go:embed tests/add.coa
var source_add string

func BenchmarkGenadd_IS(b *testing.B) {
	tc := testCase(b, "add", source_add)
	tc.Run(b, TestCaseConfig{Engine: EngineInterp, Parallel: false})
}

func BenchmarkGenadd_IP(b *testing.B) {
	tc := testCase(b, "add", source_add)
	tc.Run(b, TestCaseConfig{Engine: EngineInterp, Parallel: true})
}

func BenchmarkGenadd_VS(b *testing.B) {
	tc := testCase(b, "add", source_add)
	tc.Run(b, TestCaseConfig{Engine: EngineVM, Parallel: false})
}

func BenchmarkGenadd_VP(b *testing.B) {
	tc := testCase(b, "add", source_add)
	tc.Run(b, TestCaseConfig{Engine: EngineVM, Parallel: true})
}

func TestGenadd_IS(t *testing.T) {
	b := t
	tc := testCase(b, "add", source_add)
	tc.Test(t, TestCaseConfig{Engine: EngineInterp, Parallel: false})
}

func TestGenadd_IP(t *testing.T) {
	b := t
	tc := testCase(b, "add", source_add)
	tc.Test(t, TestCaseConfig{Engine: EngineInterp, Parallel: true})
}

func TestGenadd_VS(t *testing.T) {
	b := t
	tc := testCase(b, "add", source_add)
	tc.Test(t, TestCaseConfig{Engine: EngineVM, Parallel: false})
}

func TestGenadd_VP(t *testing.T) {
	b := t
	tc := testCase(b, "add", source_add)
	tc.Test(t, TestCaseConfig{Engine: EngineVM, Parallel: true})
}

// Test case func (tests/func.coa)
//go:embed tests/func.coa
var source_func string

func BenchmarkGenfunc_IS(b *testing.B) {
	tc := testCase(b, "func", source_func)
	tc.Run(b, TestCaseConfig{Engine: EngineInterp, Parallel: false})
}

func BenchmarkGenfunc_IP(b *testing.B) {
	tc := testCase(b, "func", source_func)
	tc.Run(b, TestCaseConfig{Engine: EngineInterp, Parallel: true})
}

func BenchmarkGenfunc_VS(b *testing.B) {
	tc := testCase(b, "func", source_func)
	tc.Run(b, TestCaseConfig{Engine: EngineVM, Parallel: false})
}

func BenchmarkGenfunc_VP(b *testing.B) {
	tc := testCase(b, "func", source_func)
	tc.Run(b, TestCaseConfig{Engine: EngineVM, Parallel: true})
}

func TestGenfunc_IS(t *testing.T) {
	b := t
	tc := testCase(b, "func", source_func)
	tc.Test(t, TestCaseConfig{Engine: EngineInterp, Parallel: false})
}

func TestGenfunc_IP(t *testing.T) {
	b := t
	tc := testCase(b, "func", source_func)
	tc.Test(t, TestCaseConfig{Engine: EngineInterp, Parallel: true})
}

func TestGenfunc_VS(t *testing.T) {
	b := t
	tc := testCase(b, "func", source_func)
	tc.Test(t, TestCaseConfig{Engine: EngineVM, Parallel: false})
}

func TestGenfunc_VP(t *testing.T) {
	b := t
	tc := testCase(b, "func", source_func)
	tc.Test(t, TestCaseConfig{Engine: EngineVM, Parallel: true})
}

// Test case loop (tests/loop.coa)
//go:embed tests/loop.coa
var source_loop string

func BenchmarkGenloop_IS(b *testing.B) {
	tc := testCase(b, "loop", source_loop)
	tc.Run(b, TestCaseConfig{Engine: EngineInterp, Parallel: false})
}

func BenchmarkGenloop_IP(b *testing.B) {
	tc := testCase(b, "loop", source_loop)
	tc.Run(b, TestCaseConfig{Engine: EngineInterp, Parallel: true})
}

func BenchmarkGenloop_VS(b *testing.B) {
	tc := testCase(b, "loop", source_loop)
	tc.Run(b, TestCaseConfig{Engine: EngineVM, Parallel: false})
}

func BenchmarkGenloop_VP(b *testing.B) {
	tc := testCase(b, "loop", source_loop)
	tc.Run(b, TestCaseConfig{Engine: EngineVM, Parallel: true})
}

func TestGenloop_IS(t *testing.T) {
	b := t
	tc := testCase(b, "loop", source_loop)
	tc.Test(t, TestCaseConfig{Engine: EngineInterp, Parallel: false})
}

func TestGenloop_IP(t *testing.T) {
	b := t
	tc := testCase(b, "loop", source_loop)
	tc.Test(t, TestCaseConfig{Engine: EngineInterp, Parallel: true})
}

func TestGenloop_VS(t *testing.T) {
	b := t
	tc := testCase(b, "loop", source_loop)
	tc.Test(t, TestCaseConfig{Engine: EngineVM, Parallel: false})
}

func TestGenloop_VP(t *testing.T) {
	b := t
	tc := testCase(b, "loop", source_loop)
	tc.Test(t, TestCaseConfig{Engine: EngineVM, Parallel: true})
}
